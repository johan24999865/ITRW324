"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bodyParser = require("body-parser");
var dotenv = require("dotenv");
var express = require("express");
var mongoose = require("mongoose");
var morgan = require("morgan");
var path = require("path");
var httpProxy = require("http-proxy");
var HttpProxyRules = require("http-proxy-rules");
var routes_1 = require("./routes");
var app = express();
exports.app = app;
dotenv.load({ path: '.env' });
app.set('port', process.env.PORT || 3000);
app.use('/', express.static(path.join(__dirname, '../public')));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(morgan('dev'));
// The database does not need to be open for this to work
var proxyRules = new HttpProxyRules({
    rules: {
        '.*/ris(.*)': process.env.RIS_BASE_URL + '/ris$1'
    }
});
// Create reverse proxy instance
var proxy = httpProxy.createProxy();
// Create http server that leverages reverse proxy instance
// and proxy rules to proxy requests to different targets
// const server = http.createServer(function (req, res) {
// a match method is exposed on the proxy rules instance
// to test a request to see if it matches against one of the specified rules
// });
// app.use(server);
mongoose.connect(process.env.MONGODB_URI, { useMongoClient: true });
var db = mongoose.connection;
mongoose.Promise = global.Promise;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function () {
    console.log('Connected to MongoDB');
    routes_1.default(app);
    app.post('/ris*', function (req, res) {
        var target = proxyRules.match(req);
        if (target) {
            return proxy.web(req, res, {
                target: target
            });
        }
    });
    app.get('/*', function (req, res) {
        res.sendFile(path.join(__dirname, '../public/index.html'));
    });
    app.listen(app.get('port'), function () {
        console.log('Webservice listening on port ' + app.get('port'));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxTTUFMTFZJTExFXFxEZXNrdG9wXFwzMjQgUHJvamVrXFxSZXBvXFxJVFJXMzI0XFx3ZWJzZXJ2aWNlXFxhcHAudHMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcU01BTExWSUxMRVxcRGVza3RvcFxcMzI0IFByb2pla1xcUmVwb1xcSVRSVzMyNFxcd2Vic2VydmljZVxcYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQTBDO0FBQzFDLCtCQUFpQztBQUNqQyxpQ0FBbUM7QUFDbkMsbUNBQXFDO0FBQ3JDLCtCQUFpQztBQUNqQywyQkFBNkI7QUFFN0Isc0NBQXdDO0FBQ3hDLGlEQUFtRDtBQUVuRCxtQ0FBaUM7QUFFakMsSUFBTSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7QUE0RGIsa0JBQUc7QUEzRFosTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQzlCLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDO0FBRTFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDM0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztBQUVwRCxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRXZCLHlEQUF5RDtBQUN6RCxJQUFNLFVBQVUsR0FBRyxJQUFJLGNBQWMsQ0FBQztJQUNwQyxLQUFLLEVBQUU7UUFDTCxZQUFZLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsUUFBUTtLQUNsRDtDQUNGLENBQUMsQ0FBQztBQUVILGdDQUFnQztBQUNoQyxJQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFdEMsMkRBQTJEO0FBQzNELHlEQUF5RDtBQUN6RCx5REFBeUQ7QUFFekQsd0RBQXdEO0FBQ3hELDRFQUE0RTtBQUU1RSxNQUFNO0FBRU4sbUJBQW1CO0FBR25CLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNwRSxJQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO0FBQ3pCLFFBQVMsQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUV6QyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0FBQ2pFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO0lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBRXBDLGdCQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFZixHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLEdBQUcsRUFBRSxHQUFHO1FBQ2xDLElBQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNYLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7Z0JBQ3pCLE1BQU0sRUFBRSxNQUFNO2FBQ2YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxHQUFHLEVBQUUsR0FBRztRQUM5QixHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHNCQUFzQixDQUFDLENBQUMsQ0FBQztJQUM3RCxDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XHJcbmltcG9ydCAqIGFzIGRvdGVudiBmcm9tICdkb3RlbnYnO1xyXG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgKiBhcyBtb25nb29zZSBmcm9tICdtb25nb29zZSc7XHJcbmltcG9ydCAqIGFzIG1vcmdhbiBmcm9tICdtb3JnYW4nO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgKiBhcyBodHRwIGZyb20gJ2h0dHAnO1xyXG5pbXBvcnQgKiBhcyBodHRwUHJveHkgZnJvbSAnaHR0cC1wcm94eSc7XHJcbmltcG9ydCAqIGFzIEh0dHBQcm94eVJ1bGVzIGZyb20gJ2h0dHAtcHJveHktcnVsZXMnO1xyXG5cclxuaW1wb3J0IHNldFJvdXRlcyBmcm9tICcuL3JvdXRlcyc7XHJcblxyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcbmRvdGVudi5sb2FkKHsgcGF0aDogJy5lbnYnIH0pO1xyXG5hcHAuc2V0KCdwb3J0JywgcHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAwKTtcclxuXHJcbmFwcC51c2UoJy8nLCBleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vcHVibGljJykpKTtcclxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XHJcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKTtcclxuXHJcbmFwcC51c2UobW9yZ2FuKCdkZXYnKSk7XHJcblxyXG4vLyBUaGUgZGF0YWJhc2UgZG9lcyBub3QgbmVlZCB0byBiZSBvcGVuIGZvciB0aGlzIHRvIHdvcmtcclxuY29uc3QgcHJveHlSdWxlcyA9IG5ldyBIdHRwUHJveHlSdWxlcyh7XHJcbiAgcnVsZXM6IHtcclxuICAgICcuKi9yaXMoLiopJzogcHJvY2Vzcy5lbnYuUklTX0JBU0VfVVJMICsgJy9yaXMkMSdcclxuICB9XHJcbn0pO1xyXG5cclxuLy8gQ3JlYXRlIHJldmVyc2UgcHJveHkgaW5zdGFuY2VcclxuY29uc3QgcHJveHkgPSBodHRwUHJveHkuY3JlYXRlUHJveHkoKTtcclxuXHJcbi8vIENyZWF0ZSBodHRwIHNlcnZlciB0aGF0IGxldmVyYWdlcyByZXZlcnNlIHByb3h5IGluc3RhbmNlXHJcbi8vIGFuZCBwcm94eSBydWxlcyB0byBwcm94eSByZXF1ZXN0cyB0byBkaWZmZXJlbnQgdGFyZ2V0c1xyXG4vLyBjb25zdCBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihmdW5jdGlvbiAocmVxLCByZXMpIHtcclxuXHJcbi8vIGEgbWF0Y2ggbWV0aG9kIGlzIGV4cG9zZWQgb24gdGhlIHByb3h5IHJ1bGVzIGluc3RhbmNlXHJcbi8vIHRvIHRlc3QgYSByZXF1ZXN0IHRvIHNlZSBpZiBpdCBtYXRjaGVzIGFnYWluc3Qgb25lIG9mIHRoZSBzcGVjaWZpZWQgcnVsZXNcclxuXHJcbi8vIH0pO1xyXG5cclxuLy8gYXBwLnVzZShzZXJ2ZXIpO1xyXG5cclxuXHJcbm1vbmdvb3NlLmNvbm5lY3QocHJvY2Vzcy5lbnYuTU9OR09EQl9VUkksIHsgdXNlTW9uZ29DbGllbnQ6IHRydWUgfSk7XHJcbmNvbnN0IGRiID0gbW9uZ29vc2UuY29ubmVjdGlvbjtcclxuKDxhbnk+bW9uZ29vc2UpLlByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcclxuXHJcbmRiLm9uKCdlcnJvcicsIGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlLCAnY29ubmVjdGlvbiBlcnJvcjonKSk7XHJcbmRiLm9uY2UoJ29wZW4nLCAoKSA9PiB7XHJcbiAgY29uc29sZS5sb2coJ0Nvbm5lY3RlZCB0byBNb25nb0RCJyk7XHJcblxyXG4gIHNldFJvdXRlcyhhcHApO1xyXG5cclxuICBhcHAucG9zdCgnL3JpcyonLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHByb3h5UnVsZXMubWF0Y2gocmVxKTtcclxuICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgcmV0dXJuIHByb3h5LndlYihyZXEsIHJlcywge1xyXG4gICAgICAgIHRhcmdldDogdGFyZ2V0XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBhcHAuZ2V0KCcvKicsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xyXG4gICAgcmVzLnNlbmRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9wdWJsaWMvaW5kZXguaHRtbCcpKTtcclxuICB9KTtcclxuXHJcbiAgYXBwLmxpc3RlbihhcHAuZ2V0KCdwb3J0JyksICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdXZWJzZXJ2aWNlIGxpc3RlbmluZyBvbiBwb3J0ICcgKyBhcHAuZ2V0KCdwb3J0JykpO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmV4cG9ydCB7IGFwcCB9O1xyXG4iXX0=