"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bodyParser = require("body-parser");
var dotenv = require("dotenv");
var express = require("express");
var mongoose = require("mongoose");
var morgan = require("morgan");
var path = require("path");
var httpProxy = require("http-proxy");
var HttpProxyRules = require("http-proxy-rules");
var routes_1 = require("./routes");
var app = express();
exports.app = app;
dotenv.load({ path: '.env' });
app.set('port', process.env.PORT || 3000);
app.use('/', express.static(path.join(__dirname, '../public')));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(morgan('dev'));
// The database does not need to be open for this to work
var proxyRules = new HttpProxyRules({
    rules: {
        '.*/ris(.*)': process.env.RIS_BASE_URL + '/ris$1'
    }
});
// Create reverse proxy instance
var proxy = httpProxy.createProxy();
mongoose.connect(process.env.MONGODB_URI, { useMongoClient: true });
var db = mongoose.connection;
mongoose.Promise = global.Promise;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function () {
    console.log('Connected to MongoDB');
    routes_1.default(app);
    app.post('/ris*', function (req, res) {
        var target = proxyRules.match(req);
        if (target) {
            return proxy.web(req, res, {
                target: target
            });
        }
    });
    app.get('/*', function (req, res) {
        res.sendFile(path.join(__dirname, '../public/index.html'));
    });
    app.listen(app.get('port'), function () {
        console.log('Webservice listening on port ' + app.get('port'));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxTTUFMTFZJTExFXFxEZXNrdG9wXFwzMjQgUHJvamVrXFxSZXBvXFxJVFJXMzI0XFx3ZWJzZXJ2aWNlXFxhcHAudHMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcU01BTExWSUxMRVxcRGVza3RvcFxcMzI0IFByb2pla1xcUmVwb1xcSVRSVzMyNFxcd2Vic2VydmljZVxcYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQTBDO0FBQzFDLCtCQUFpQztBQUNqQyxpQ0FBbUM7QUFDbkMsbUNBQXFDO0FBQ3JDLCtCQUFpQztBQUNqQywyQkFBNkI7QUFFN0Isc0NBQXdDO0FBQ3hDLGlEQUFtRDtBQUVuRCxtQ0FBaUM7QUFFakMsSUFBTSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7QUFnRGIsa0JBQUc7QUEvQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQzlCLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDO0FBRTFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDM0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztBQUVwRCxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRXZCLHlEQUF5RDtBQUN6RCxJQUFNLFVBQVUsR0FBRyxJQUFJLGNBQWMsQ0FBQztJQUNwQyxLQUFLLEVBQUU7UUFDTCxZQUFZLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsUUFBUTtLQUNsRDtDQUNGLENBQUMsQ0FBQztBQUVILGdDQUFnQztBQUNoQyxJQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFdEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3BFLElBQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7QUFDekIsUUFBUyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBRXpDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7QUFDakUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7SUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFFcEMsZ0JBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVmLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsR0FBRyxFQUFFLEdBQUc7UUFDbEMsSUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1gsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtnQkFDekIsTUFBTSxFQUFFLE1BQU07YUFDZixDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxVQUFVLEdBQUcsRUFBRSxHQUFHO1FBQzlCLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcclxuaW1wb3J0ICogYXMgZG90ZW52IGZyb20gJ2RvdGVudic7XHJcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCAqIGFzIG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcclxuaW1wb3J0ICogYXMgbW9yZ2FuIGZyb20gJ21vcmdhbic7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCAqIGFzIGh0dHAgZnJvbSAnaHR0cCc7XHJcbmltcG9ydCAqIGFzIGh0dHBQcm94eSBmcm9tICdodHRwLXByb3h5JztcclxuaW1wb3J0ICogYXMgSHR0cFByb3h5UnVsZXMgZnJvbSAnaHR0cC1wcm94eS1ydWxlcyc7XHJcblxyXG5pbXBvcnQgc2V0Um91dGVzIGZyb20gJy4vcm91dGVzJztcclxuXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuZG90ZW52LmxvYWQoeyBwYXRoOiAnLmVudicgfSk7XHJcbmFwcC5zZXQoJ3BvcnQnLCBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDApO1xyXG5cclxuYXBwLnVzZSgnLycsIGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9wdWJsaWMnKSkpO1xyXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcclxuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xyXG5cclxuYXBwLnVzZShtb3JnYW4oJ2RldicpKTtcclxuXHJcbi8vIFRoZSBkYXRhYmFzZSBkb2VzIG5vdCBuZWVkIHRvIGJlIG9wZW4gZm9yIHRoaXMgdG8gd29ya1xyXG5jb25zdCBwcm94eVJ1bGVzID0gbmV3IEh0dHBQcm94eVJ1bGVzKHtcclxuICBydWxlczoge1xyXG4gICAgJy4qL3JpcyguKiknOiBwcm9jZXNzLmVudi5SSVNfQkFTRV9VUkwgKyAnL3JpcyQxJ1xyXG4gIH1cclxufSk7XHJcblxyXG4vLyBDcmVhdGUgcmV2ZXJzZSBwcm94eSBpbnN0YW5jZVxyXG5jb25zdCBwcm94eSA9IGh0dHBQcm94eS5jcmVhdGVQcm94eSgpO1xyXG5cclxubW9uZ29vc2UuY29ubmVjdChwcm9jZXNzLmVudi5NT05HT0RCX1VSSSwgeyB1c2VNb25nb0NsaWVudDogdHJ1ZSB9KTtcclxuY29uc3QgZGIgPSBtb25nb29zZS5jb25uZWN0aW9uO1xyXG4oPGFueT5tb25nb29zZSkuUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xyXG5cclxuZGIub24oJ2Vycm9yJywgY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUsICdjb25uZWN0aW9uIGVycm9yOicpKTtcclxuZGIub25jZSgnb3BlbicsICgpID0+IHtcclxuICBjb25zb2xlLmxvZygnQ29ubmVjdGVkIHRvIE1vbmdvREInKTtcclxuXHJcbiAgc2V0Um91dGVzKGFwcCk7XHJcblxyXG4gIGFwcC5wb3N0KCcvcmlzKicsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gcHJveHlSdWxlcy5tYXRjaChyZXEpO1xyXG4gICAgaWYgKHRhcmdldCkge1xyXG4gICAgICByZXR1cm4gcHJveHkud2ViKHJlcSwgcmVzLCB7XHJcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGFwcC5nZXQoJy8qJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XHJcbiAgICByZXMuc2VuZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL3B1YmxpYy9pbmRleC5odG1sJykpO1xyXG4gIH0pO1xyXG5cclxuICBhcHAubGlzdGVuKGFwcC5nZXQoJ3BvcnQnKSwgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1dlYnNlcnZpY2UgbGlzdGVuaW5nIG9uIHBvcnQgJyArIGFwcC5nZXQoJ3BvcnQnKSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IHsgYXBwIH07XHJcbiJdfQ==