"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseCtrl = (function () {
    function BaseCtrl() {
        var _this = this;
        // Get all
        this.getAll = function (req, res) {
            _this.model.find({}, function (err, docs) {
                if (err) {
                    res.sendStatus(500);
                    return console.error(err);
                }
                res.json(docs);
            });
        };
        // Count all
        this.count = function (req, res) {
            _this.model.count(function (err, count) {
                if (err) {
                    res.sendStatus(500);
                    return console.error(err);
                }
                res.json(count);
            });
        };
        // Insert
        this.insert = function (req, res) {
            var obj = new _this.model(req.body);
            obj.save(function (err, item) {
                // 11000 is the code for duplicate key error
                if (err && err.code === 11000) {
                    res.status(400).json(err);
                    return console.error(err);
                }
                if (err) {
                    res.sendStatus(500);
                    return console.error(err);
                }
                res.status(200).json(item);
            });
        };
        // Get by id
        this.get = function (req, res) {
            _this.model.findOne({ _id: req.params.id }, function (err, obj) {
                if (err) {
                    res.sendStatus(500);
                    return console.error(err);
                }
                res.json(obj);
            });
        };
        // Update by id
        this.update = function (req, res) {
            _this.model.findOneAndUpdate({ _id: req.params.id }, req.body, function (err) {
                // 11000 is the code for duplicate key error
                if (err && err.code === 11000) {
                    res.status(400).json(err);
                    return console.error(err);
                }
                if (err) {
                    res.sendStatus(500);
                    return console.error(err);
                }
                res.sendStatus(200);
            });
        };
        // Delete by id
        this.delete = function (req, res) {
            _this.model.findOneAndRemove({ _id: req.params.id }, function (err) {
                if (err) {
                    res.sendStatus(500);
                    return console.error(err);
                }
                res.sendStatus(200);
            });
        };
    }
    return BaseCtrl;
}());
exports.default = BaseCtrl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxTTUFMTFZJTExFXFxEZXNrdG9wXFwzMjQgUHJvamVrXFxSZXBvXFxJVFJXMzI0XFx3ZWJzZXJ2aWNlXFxjb250cm9sbGVyc1xcYmFzZS50cyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxTTUFMTFZJTExFXFxEZXNrdG9wXFwzMjQgUHJvamVrXFxSZXBvXFxJVFJXMzI0XFx3ZWJzZXJ2aWNlXFxjb250cm9sbGVyc1xcYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0lBQUE7UUFBQSxpQkErRUM7UUE1RUMsVUFBVTtRQUNWLFdBQU0sR0FBRyxVQUFDLEdBQUcsRUFBRSxHQUFHO1lBQ2hCLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxVQUFDLEdBQUcsRUFBRSxJQUFJO2dCQUM1QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUNSLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM1QixDQUFDO2dCQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7UUFFRixZQUFZO1FBQ1osVUFBSyxHQUFHLFVBQUMsR0FBRyxFQUFFLEdBQUc7WUFDZixLQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFDLEdBQUcsRUFBRSxLQUFLO2dCQUMxQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUNSLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM1QixDQUFDO2dCQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEIsQ0FB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LENBQUMsQ0FBQyxDQUFDO29CQUNSLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM1QixDQUFDO2dCQUNELEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7SUFDSixDQUFDO0lBQUQsZUFBQztBQUFELENBQUMsQUEvRUQsSUErRUM7QUFFRCxrQkFBZSxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJhYnN0cmFjdCBjbGFzcyBCYXNlQ3RybCB7XHJcbiAgYWJzdHJhY3QgbW9kZWw6IGFueTtcclxuXHJcbiAgLy8gR2V0IGFsbFxyXG4gIGdldEFsbCA9IChyZXEsIHJlcykgPT4ge1xyXG4gICAgdGhpcy5tb2RlbC5maW5kKHt9LCAoZXJyLCBkb2NzKSA9PiB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICByZXMuc2VuZFN0YXR1cyg1MDApO1xyXG4gICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgIH1cclxuICAgICAgcmVzLmpzb24oZG9jcyk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyBDb3VudCBhbGxcclxuICBjb3VudCA9IChyZXEsIHJlcykgPT4ge1xyXG4gICAgdGhpcy5tb2RlbC5jb3VudCgoZXJyLCBjb3VudCkgPT4ge1xyXG4gICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgcmVzLnNlbmRTdGF0dXMoNTAwKTtcclxuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICB9XHJcbiAgICAgIHJlcy5qc29uKGNvdW50KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8vIEluc2VydFxyXG4gIGluc2VydCA9IChyZXEsIHJlcykgPT4ge1xyXG4gICAgY29uc3Qgb2JqID0gbmV3IHRoaXMubW9kZWwocmVxLmJvZHkpO1xyXG4gICAgb2JqLnNhdmUoKGVyciwgaXRlbSkgPT4ge1xyXG4gICAgICAvLyAxMTAwMCBpcyB0aGUgY29kZSBmb3IgZHVwbGljYXRlIGtleSBlcnJvclxyXG4gICAgICBpZiAoZXJyICYmIGVyci5jb2RlID09PSAxMTAwMCkge1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKGVycik7XHJcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgcmVzLnNlbmRTdGF0dXMoNTAwKTtcclxuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICB9XHJcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKGl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gR2V0IGJ5IGlkXHJcbiAgZ2V0ID0gKHJlcSwgcmVzKSA9PiB7XHJcbiAgICB0aGlzLm1vZGVsLmZpbmRPbmUoeyBfaWQ6IHJlcS5wYXJhbXMuaWQgfSwgKGVyciwgb2JqKSA9PiB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICByZXMuc2VuZFN0YXR1cyg1MDApO1xyXG4gICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgIH1cclxuICAgICAgcmVzLmpzb24ob2JqKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8vIFVwZGF0ZSBieSBpZFxyXG4gIHVwZGF0ZSA9IChyZXEsIHJlcykgPT4ge1xyXG4gICAgdGhpcy5tb2RlbC5maW5kT25lQW5kVXBkYXRlKHsgX2lkOiByZXEucGFyYW1zLmlkIH0sIHJlcS5ib2R5LCBlcnIgPT4ge1xyXG4gICAgICAvLyAxMTAwMCBpcyB0aGUgY29kZSBmb3IgZHVwbGljYXRlIGtleSBlcnJvclxyXG4gICAgICBpZiAoZXJyICYmIGVyci5jb2RlID09PSAxMTAwMCkge1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKGVycik7XHJcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgcmVzLnNlbmRTdGF0dXMoNTAwKTtcclxuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICB9XHJcbiAgICAgIHJlcy5zZW5kU3RhdHVzKDIwMCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyBEZWxldGUgYnkgaWRcclxuICBkZWxldGUgPSAocmVxLCByZXMpID0+IHtcclxuICAgIHRoaXMubW9kZWwuZmluZE9uZUFuZFJlbW92ZSh7IF9pZDogcmVxLnBhcmFtcy5pZCB9LCBlcnIgPT4ge1xyXG4gICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgcmVzLnNlbmRTdGF0dXMoNTAwKTtcclxuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICB9XHJcbiAgICAgIHJlcy5zZW5kU3RhdHVzKDIwMCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCYXNlQ3RybDtcclxuIl19